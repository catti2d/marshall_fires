boulder_precincts = st_read("../GIS_inputs_destruction_fireboundary/Unincorporated_Boulder/Unincorporated_Boulder.shp")
# Broomfield Boundary
broomfield_precincts = st_read("../GIS_inputs_destruction_fireboundary/Broomfield_Precincts/Precincts.shp")
# Westminster Boundary
westminster_city = st_read("../GIS_inputs_destruction_fireboundary/Westminster_CityLimits/CityLimits.shp")
# make all the precincts have the same columns (we don't need a lot of the data)
boulder_precincts <- boulder_precincts %>%
select(c(OBJECTID, geometry, SHAPEarea, SHAPElen))
broomfield_precincts <- broomfield_precincts %>%
mutate(SHAPEarea = Shape__Are,
SHAPElen = Shape__Len,
OBJECTID = OBJECTID + 1000) %>% # add 1,000 to the broomfield precincts to get rid of overlapping labels
select(-c("GlobalID", "GIS_ID", "PRECINCT_N", "MAP_COLOR", "USER_COMME", "LAST_UPDAT", "Shape__Are", "Shape__Len"))
westminster_city <- westminster_city %>%
mutate(SHAPEarea = ShapeSTAre,
SHAPElen = ShapeSTLen) %>%
select(c(OBJECTID, geometry, SHAPEarea, SHAPElen))
# save proj string for fire-affected counties to use for other transformations
prg = raster::crs(fire_counties,asText=TRUE)
# all boundaries joined together
all_bounds <- boulder_precincts %>%
rbind(st_transform(broomfield_precincts, crs=prg)) %>%
rbind(st_transform(westminster_city, crs=prg))
# remove the holes that existed so we just have the outside boundary of this area
all_bounds <- all_bounds %>%
st_union() %>%
st_remove_holes()
# Marshall fire boundary
wfigs_fire = st_read("../GIS_inputs_destruction_fireboundary/WFIGS_-_Wildland_Fire_Perimeters_Full_History/FH_Perimeter.shp")
# filter fire to marshall fire only; update crs
marshall_fire = wfigs_fire %>% filter(poly_Incid == "Marshall") %>% st_transform(crs = st_crs(prg))
# BUILDINGS
# Read in destroyed home and building sites
destroyed_homes = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/destroyed_homes.shp")
damaged_homes = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/damaged_homes.shp")
destroyed_businesses = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/destroyed_businesses.shp")
damaged_businesses = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/damaged_businesses.shp")
# create 'type' column; select only the columns needed; make projection string match
destroyed_homes = destroyed_homes %>%
mutate(type = "destroyed - residential") %>%
dplyr::rename(jurisdiction = JURISDICTI) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
destroyed_businesses = destroyed_businesses %>%
mutate(type = "destroyed - non-residential") %>%
dplyr::rename(jurisdiction = Jurisdicti) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
damaged_homes = damaged_homes %>%
mutate(type = "damaged - residential") %>%
dplyr::rename(jurisdiction = JURISDICTI) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
damaged_business = damaged_businesses %>%
mutate(type = "damaged - non-residential") %>%
dplyr::rename(jurisdiction = Jurisdicti) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
# combine into one df, using the "," indicator keeps decimal points
destroyed_damaged = rbind(destroyed_homes,
destroyed_businesses,
damaged_homes,
damaged_business) %>%
separate(latlong, c("lat","long"), ",", convert = FALSE)
# change lat and long to floats
destroyed_damaged$lat = as.double(destroyed_damaged$lat)
destroyed_damaged$long = as.double(destroyed_damaged$long)
# create "location status" column for mapping]
sensors$loc_status = str_c(sensors$Location, " - ", sensors$Status)
# make sure we only have valid sensors that have data
sensors = na.omit(sensors)
# set factors to false
options(stringsAsFactors = FALSE)
# create palette for destroyed and damaged building colors for leaflet map
pal = colorFactor(c("red","orange","magenta","light pink"), domain = unique(destroyed_damaged$type))
## create indoor/outdoor icons
sensorIcon = awesomeIconList(
"inside" = makeAwesomeIcon(
icon = "home",
iconColor = "white",
markerColor = "blue",
library = "fa"
),
"outside" = makeAwesomeIcon(
icon = "tree",
iconColor = "white",
markerColor = "green",
library = "fa"
))
sensors
# interactive map of damaged/destroyed buildings and AQ sensors (indoor/outdoor)
# chose not to do icons for destroyed/damaged buildings because the map got really busy
fire_destruction_and_AQ_plot = leaflet(sensors) %>%
addTiles() %>%
addAwesomeMarkers(icon = ~sensorIcon[Location],
lng = sensors$Lon, lat = sensors$Lat) %>%
addCircleMarkers(color = ~pal(destroyed_damaged$type),
radius = 3.5,
opacity = 1,
lng = destroyed_damaged$long, lat = destroyed_damaged$lat) %>%
addLegend("topright", pal = pal, values = ~destroyed_damaged$type,
title = "Fire damage")
# create palette for location + time period
timeSensorIcon = awesomeIconList(
"inside - Complete data throughout fire period" = makeAwesomeIcon(
icon = "home",
iconColor = "white",
markerColor = "green",
library = "fa"
),
"inside - Sensor offline during fire, did not return online" = makeAwesomeIcon(
icon = "tree",
iconColor = "white",
markerColor = "gray",
library = "fa"
),
"inside - Sensor offline during fire, returned online" = makeAwesomeIcon(
icon = "home",
iconColor = "white",
markerColor = "blue",
library = "fa"
),
"outside - Complete data throughout fire period" = makeAwesomeIcon(
icon = "home",
iconColor = "white",
markerColor = "green",
library = "fa"
),
"outside - Sensor offline during fire, did not return online" = makeAwesomeIcon(
icon = "tree",
iconColor = "white",
markerColor = "gray",
library = "fa"
),
"outside - Sensor offline during fire, returned online" = makeAwesomeIcon(
icon = "tree",
iconColor = "white",
markerColor = "blue",
library = "fa"
))
# map based on when sensor was added
(fire_destruction_and_AQ_plot = leaflet(sensors) %>%
addTiles() %>%
addAwesomeMarkers(icon = ~timeSensorIcon[loc_status],
lng = sensors$Lon, lat = sensors$Lat) %>%
addCircleMarkers(color = ~pal(destroyed_damaged$type),
radius = 3.5,
opacity = 1,
lng = destroyed_damaged$long, lat = destroyed_damaged$lat) %>%
addLegend("topright", pal = pal, values = ~destroyed_damaged$type,
title = "Fire damage") %>%
addLegend("bottomright",
pal = colorFactor(c("green","gray","blue"), domain = unique(sensors$Status)),
values = ~sensors$Status, title = "Sensor Time Info"))
## Create spacetime objects -- 10 minute averages
# first, re-format datetime as a xts object
AQ_df$datetime = as.POSIXct(AQ_df$datetime)
# create spatial points object for each sensor
PA_sensors = SpatialPoints(AQ_df[!duplicated(AQ_df$ID), c("Lon", "Lat")],proj4string = CRS(prg))
summary(PA_sensors)
# construct spatiotemporal object
PA_STFDF = stConstruct(AQ_df, space = c("Lon","Lat"), time = "datetime", crs = CRS(prg), SpatialObj = sensors)
# turn ST object into a STFDF (stationary points)
PA_STFDF = as(PA_STFDF,"STFDF")
# see summary of data
summary(PA_STFDF)
# object class
class(PA_STFDF)
# object dimensions
dim(PA_STFDF)
ggplot(all_bounds, aes(geometry=geometry)) +
geom_sf() +
geom_sf(data=marshall_fire$geometry, fill="red", alpha=0.6) +
geom_sf(data=st_as_sf(PA_sensors))
## Time series plots
stplot(PA_STFDF[,"2021-12-30::2021-12-31","temp"],mode="ts")
stplot(PA_STFDF[,"2021-12-30::2021-12-31","rh"],mode="ts")
stplot(PA_STFDF[,"2021-12-30::2021-12-31","corrected_pm"],mode="ts")
stplot(PA_STFDF[,"2021-12-30::2021-12-31","temp"],mode="xt")
stplot(PA_STFDF[,"2021-12-30::2021-12-31","rh"],mode="xt")
stplot(PA_STFDF[,"2021-12-30::2021-12-31","corrected_pm"],mode="xt")
# make an STFDF with only the sensors that had complete data for the fire
complete_sensors = sensors %>% filter(Status == "Complete data throughout fire period")
complete_STFDF = PA_STFDF[PA_STFDF@data$ID %in% complete_sensors$ID]
stplot(complete_STFDF[,,"corrected_pm"], mode="ts")
stplot(complete_STFDF[,"2021-12-30::2021-12-31","corrected_pm"], mode="ts")
stplot(complete_STFDF[,"2021-12-30::2021-12-31","corrected_pm"], mode="tp")
# Index 15 -> ID 60517, STANDLEY LAKE
#plot(fortify(PA_STFDF[PA_STFDF@data$ID == 60517]["2021-12-30::2022-01-02", "corrected_pm"]))
# looks normal
# Index 23 -> ID 91877, Eisenhower Dr
#plot(fortify(PA_STFDF[PA_STFDF@data$ID == 91877]["2021-12-30::2022-01-02", "corrected_pm"]))
# has incredibly large values midday Friday - Sunday, could be snow related?
# Index 36 -> ID 112606, 1333 Wildwood Ct., Boulder, CO 80305 sensor
#plot(fortify(PA_STFDF[PA_STFDF@data$ID == 112606]["2021-12-30::2022-01-02", "corrected_pm"]))
# looking at purpleair map, A channel is 'downgraded', 0% confidence
# Index 40 -> ID 119547, Broadlands sensor
#(fortify(PA_STFDF[PA_STFDF@data$ID == 119547]["2021-12-30::2022-01-02", "corrected_pm"]))
# reasonable values
# get all of the data for the 12/30 to 1/2 timeframe
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
# get rid of the weird sensor that might be throwing residuals off
krig_data <- krig_data[krig_data@data$Name != "ntsky"]
# reproject the data to utm
reproj <- "+proj=utm +zone=13 +datum=WGS84 +units=km"
krig_data@sp <- spTransform(krig_data@sp, reproj)
# get all of the data for the 12/30 to 1/2 timeframe
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
krig_data
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
krig_data
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
krig_data
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
krig_data
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
krig_data
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
krig_data
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
krig_data
# get rid of the weird sensor that might be throwing residuals off
krig_data <- krig_data[krig_data@data$Name != "ntsky"]
krig_data
# reproject the data to utm
reproj <- "+proj=utm +zone=13 +datum=WGS84 +units=km"
krig_data@sp <- spTransform(krig_data@sp, reproj)
# get rid of the weird sensor that might be throwing residuals off
krig_data <- krig_data[krig_data@data$Name != "ntsky"]
krig_data
#krig_data@sp <- spTransform(krig_data@sp, reproj)
krig_data@sp <- spTransform(krig_data, reproj)
#krig_data@sp <- spTransform(krig_data@sp, reproj)
krig_data@sp <- spTransform(krig_data@sp, reproj)
krig_data@sp
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
# get rid of the weird sensor that might be throwing residuals off
krig_data <- krig_data[krig_data@data$Name != "ntsky"]
krig_data@sp
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
krig_data@sp
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
# get rid of the weird sensor that might be throwing residuals off
#krig_data <- krig_data[krig_data@data$Name != "ntsky"]
# reproject the data to utm
reproj <- "+proj=utm +zone=13 +datum=WGS84 +units=km"
#krig_data@sp <- spTransform(krig_data@sp, reproj)
krig_data@sp <- spTransform(krig_data@sp, reproj)
# get all of the data for the 12/30 to 1/2 timeframe
krig_data <- complete_STFDF[,"2021-12-30::2022-01-02"]
# limit to only outdoor sensors
krig_data <- krig_data[krig_data@data$Location == "outside"]
# drop sensor 112606 (Wildwood Ct) because it has 0% confidence according to PurpleAir map
krig_data <- krig_data[krig_data@data$ID != 112606]
# drop values for "Eisenhower Dr" sensor that are over 1000
krig_data@data[(krig_data@data$ID == 91877) &
(as.numeric(krig_data@data$corrected_pm) > 1000) &
!is.na(krig_data@data$corrected_pm),]$corrected_pm <- NA
# get rid of the weird sensor that might be throwing residuals off -- COMMENTED OUT FOR KRIG-DATA TO WORK
#krig_data <- krig_data[krig_data@data$Name != "ntsky"]
# reproject the data to utm
reproj <- "+proj=utm +zone=13 +datum=WGS84 +units=km"
#krig_data@sp <- spTransform(krig_data@sp, reproj)
krig_data@sp <- spTransform(krig_data@sp, reproj)
# aggregate from 10 min intervals to 1 hour intervals
krig_data <- aggregate(krig_data, by="hour", mean)
# split the data into the days we want for the fire period
dec30 <- krig_data[, "2021-12-30"]
dec31 <- krig_data[, "2021-12-31"]
jan1 <- krig_data[, "2022-01-01"]
jan2 <- krig_data[, "2022-01-02"]
# split each day into the time periods of focus
# pre-fire period: betweeen 00:00 - 11:00 MST on 12/30/2021
pre_fire <- aggregate(dec30, by="11 hours", mean)[, "2021-12-30 00:00:00"]
# fire period (11am - 5pm)
during_fire <- aggregate(dec30[, "2021-12-30 11:00:00::2021-12-30 16:00:00"], by="6 hours", mean)
# post-fire on 12/30/2021
evening_of_fire <- aggregate(dec30[, "2021-12-30 16:00:00::2021-12-31 00:00:00"], by="8 hours", mean)
# dec 31st
december31 <- aggregate(dec31, by="day", mean)
# january 1st
january1 <- aggregate(jan1, by="day", mean)
# january 2nd
january2 <- aggregate(jan2, by="day", mean)
periods <- c(pre_fire, during_fire, evening_of_fire, december31, january1, january2)
# create variograms for these time periods
pre_fire.vgm <- variogram(corrected_pm~1, pre_fire[!is.na(pre_fire$corrected_pm),])
during_fire.vgm <- variogram(corrected_pm~1, during_fire[!is.na(during_fire$corrected_pm),])
evening_of_fire.vgm <- variogram(corrected_pm~1, evening_of_fire[!is.na(evening_of_fire$corrected_pm),])
december31.vgm <- variogram(corrected_pm~1, december31[!is.na(december31$corrected_pm),])
january1.vgm <- variogram(corrected_pm~1, january1[!is.na(january1$corrected_pm),])
january2.vgm <- variogram(corrected_pm~1, january2[!is.na(january2$corrected_pm),])
# plot the variograms
plot(pre_fire.vgm)
plot(during_fire.vgm)
during_fire.vgm <- variogram(corrected_pm~1, during_fire[!is.na(during_fire$corrected_pm),])
plot(during_fire.vgm)
grd <- SpatialPixels(SpatialPoints(as_Spatial(st_make_grid(all_bounds, n=50))), proj4string = prg)
plot(grd)
grd <- grd[as_Spatial(all_bounds),]
plot(grd)
grd <- spTransform(grd, CRS(reproj))
plot(pre_fire$corrected_pm)
plot(during_fire$corrected_pm)
plot(evening_of_fire$corrected_pm)
plot(december31$corrected_pm)
plot(january1$corrected_pm)
plot(january2$corrected_pm)
pre_fire.idw <- idw(corrected_pm~1, pre_fire[!is.na(pre_fire$corrected_pm),], grd)
spplot(pre_fire.idw[,1], main="Pre-Fire Period on 12/30")
during_fire.idw <- idw(corrected_pm~1, during_fire[!is.na(during_fire$corrected_pm),], grd)
spplot(during_fire.idw[,1], main="During Fire on 12/30")
evening_of_fire.idw <- idw(corrected_pm~1, evening_of_fire[!is.na(evening_of_fire$corrected_pm),], grd)
spplot(evening_of_fire.idw[,1], main="After Fire on 12/30")
december31.idw <- idw(corrected_pm~1, december31[!is.na(december31$corrected_pm),], grd)
spplot(december31.idw[,1], main="December 31st")
january1.idw <- idw(corrected_pm~1, january1[!is.na(january1$corrected_pm),], grd)
spplot(january1.idw[,1], main="January 1st")
january2.idw <- idw(corrected_pm~1, january2[!is.na(january2$corrected_pm),], grd)
spplot(january2.idw[,1], main="January 2nd")
# plot the variograms
plot(pre_fire.vgm)
plot(evening_of_fire.vgm)
plot(december31.vgm)
plot(january1.vgm)
plot(january2.vgm)
plot(evening_of_fire.vgm)
plot(december31.vgm)
plot(january1.vgm)
plot(january2.vgm)
aqi_colors <- c("#00e400",
"#ffff00",
"#ff7e00",
"#ff0000",
"#8f3f97",
"#7e0023")
aqi_labels <- c("Good (0-12.0)",
"Moderate (12.1-35.4)",
"Unhealthy for Sensitive Groups (35.5-55.4)",
"Unhealthy (55.5-150.4)",
"Very Unhealthy (150.5-250.4)",
"Hazardous (250.5-500.4)")
factorize_aqi <- function (idw) {
idw$PM2.5 <- cut(idw$var1.pred, breaks=c(0, 12.0, 35.4, 55.4, 150.4, 250.4), na.omit=T)
return(idw)
}
plot_idw <- function(idw, title) {
return(ggplot(all_bounds) +
geom_sf() +
geom_sf(data=st_as_sf(factorize_aqi(idw)), aes(col=PM2.5), size=2) +
scale_color_manual(values=aqi_colors, labels=aqi_labels, name="PM2.5 (µg/m^3)") +
geom_sf(data=marshall_fire$geometry, col="gray20", alpha=0.1) +
ggtitle(title))
}
plot_idw(pre_fire.idw, "Pre Fire IDW")
plot_idw(during_fire.idw, "During Fire IDW")
plot_idw(evening_of_fire.idw, "Evening of fire IDW")
plot_idw(december31.idw, "December 31st IDW")
plot_idw(january1.idw, "January 1st IDW")
plot_idw(january2.idw, "January 2nd IDW")
spplot(january2.idw[,1], main="January 2nd")
r_grd <- raster(grd, nrows=50, ncols=49) # creating a 50x50 object gives some weird visuals
plot_idw_raster <- function(idw, title) {
r <- raster::rasterize(idw, r_grd, field="var1.pred")
extent(r) <- st_bbox(all_bounds)
r_df <- r %>%
rasterToPoints() %>%
data.frame() %>%
mutate(cuts = cut(layer, breaks=c(0, 12.0, 35.4, 55.4, 150.4, 250.4), na.omit=T))
return(ggplot() +
geom_tile(data=r_df, aes(x=x, y=y, fill=cuts))+
scale_fill_manual(values=aqi_colors, labels=aqi_labels, name="PM2.5 (µg/m^3)", drop=FALSE) +
geom_sf(data=marshall_fire$geometry, col="gray20", alpha=0.1) +
ggtitle(title))
}
plot_idw_raster(pre_fire.idw, "Pre Fire IDW")
plot_idw_raster(during_fire.idw, "During Fire IDW")
plot_idw_raster(evening_of_fire.idw, "Evening of fire IDW")
plot_idw_raster(december31.idw, "December 31st IDW")
plot_idw_raster(january1.idw, "January 1st IDW")
plot_idw_raster(january2.idw, "January 2nd IDW")
r <- raster::rasterize(during_fire.idw, r_grd, field="var1.pred")
extent(r) <- st_bbox(all_bounds)
r[r < 12] <- NA
writeRaster(r, "../GIS_inputs_destruction_fireboundary/smoke_affected.tiff", overwrite=TRUE)
pre_fire.idw_cv <- krige.cv(corrected_pm~1, pre_fire[!is.na(pre_fire$corrected_pm),], nfold=38)
pre_fire.idw_sd <- sd(pre_fire.idw_cv$residual)
paste("Pre fire standard deviation:", pre_fire.idw_sd)
spplot(pre_fire.idw_cv, main="Pre-Fire Period on 12/30")
pre_fire.idw_cv$zscore <- pre_fire.idw_cv$residual / pre_fire.idw_sd
during_fire.idw_cv <- krige.cv(corrected_pm~1, during_fire[!is.na(during_fire$corrected_pm),], nfold=38)
during_fire.idw_sd <- sd(during_fire.idw_cv$residual)
paste("During fire standard deviation:", during_fire.idw_sd)
spplot(during_fire.idw_cv, main="During Fire on 12/30")
during_fire.idw_cv$zscore <- during_fire.idw_cv$residual / during_fire.idw_sd
evening_of_fire.idw_cv <- krige.cv(corrected_pm~1, evening_of_fire[!is.na(evening_of_fire$corrected_pm),], nfold=38)
evening_of_fire.idw_sd <- sd(evening_of_fire.idw_cv$residual)
paste("Evening of fire standard deviation:", evening_of_fire.idw_sd)
spplot(evening_of_fire.idw_cv, main="After Fire on 12/30")
evening_of_fire.idw_cv$zscore <- evening_of_fire.idw_cv$residual / evening_of_fire.idw_sd
december31.idw_cv <- krige.cv(corrected_pm~1, december31[!is.na(december31$corrected_pm),], nfold=38)
december31.idw_sd <- sd(december31.idw_cv$residual)
paste("December 31st standard deviation:", december31.idw_sd)
spplot(december31.idw_cv, main="December 31st")
december31.idw_cv$zscore <- december31.idw_cv$residual / december31.idw_sd
january1.idw_cv <- krige.cv(corrected_pm~1, january1[!is.na(january1$corrected_pm),], nfold=38)
january1.idw_sd <- sd(january1.idw_cv$residual)
paste("January 1 standard deviation:", january1.idw_sd)
spplot(january1.idw_cv, main="January 1st")
january1.idw_cv$zscore <- january1.idw_cv$residual / january1.idw_sd
january2.idw_cv <- krige.cv(corrected_pm~1, january2[!is.na(january2$corrected_pm),], nfold=38)
january1.idw_cv <- krige.cv(corrected_pm~1, january1[!is.na(january1$corrected_pm),], nfold=38)
january1.idw_sd <- sd(january1.idw_cv$residual)
paste("January 1 standard deviation:", january1.idw_sd)
spplot(january1.idw_cv, main="January 1st")
january1.idw_cv$zscore <- january1.idw_cv$residual / january1.idw_sd
january2.idw_cv <- krige.cv(corrected_pm~1, january2[!is.na(january2$corrected_pm),], nfold=38)
plot_idw_resid <- function(idw.cv, title) {
return(ggplot(all_bounds) +
geom_sf(fill="#FbFbFb", color="gray") +
geom_sf(data=marshall_fire$geometry, col="red", alpha=0.1) +
geom_sf(data=st_as_sf(idw.cv), aes(fill=residual), color="black", shape=21, size=2) +
scale_color_gradient2(aesthetics="fill") +
ggtitle(title))
}
plot_idw_resid_zscore <- function(idw.cv, title) {
return(ggplot(all_bounds) +
geom_sf(fill="#FbFbFb", color="gray") +
geom_sf(data=marshall_fire$geometry, col="red", alpha=0.1) +
geom_sf(data=st_as_sf(idw.cv), aes(fill=zscore), color="black", shape=21, size=2) +
scale_color_gradient2(aesthetics="fill") +
ggtitle(title))
}
plot_idw_resid(pre_fire.idw_cv, "Pre-Fire Residuals")
plot_idw_resid(during_fire.idw_cv, "During Fire Residuals")
plot_idw_resid(evening_of_fire.idw_cv, "After Fire Residuals")
plot_idw_resid(december31.idw_cv, "December 31st Residuals")
plot_idw_resid(january1.idw_cv, "January 1st Residuals")
plot_idw_resid(january2.idw_cv, "January 2nd Residuals")
plot_idw_resid_zscore(pre_fire.idw_cv, "Pre-Fire Residual Z-Scores")
plot_idw_resid_zscore(during_fire.idw_cv, "During Fire Residual Z-Scores")
plot_idw_resid_zscore(evening_of_fire.idw_cv, "After Fire Residual Z-Scores")
plot_idw_resid_zscore(december31.idw_cv, "December 31st Residual Z-Scores")
plot_idw_resid_zscore(january1.idw_cv, "January 1st Residual Z-Scores")
plot_idw_resid_zscore(january2.idw_cv, "January 2nd Residual Z-Scores")
for (j in c(30, 31, 01, 02)) {
if (j > 3) {
date <- paste("2021-12-", j, sep="")
} else {
date <- paste("2022-01-", j, sep="")
}
for (i in 0:23) {
if (i < 10) {
i <- paste("0", i, sep="")
}
t <- paste(date, " ", i, ":00:00", sep="")
i.data <- krig_data[, t]
i.idw <- idw(corrected_pm~1, i.data[!is.na(i.data$corrected_pm),], grd)
print(plot_idw_raster(i.idw, paste(t, "IDW")))
}
}
